// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole  @default(CHILD)
  masterUserId      String?
  canViewOthers     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  // Relations
  accounts          Account[]
  sessions          Session[]
  masterUser        User?     @relation("MasterChild", fields: [masterUserId], references: [id])
  childUsers        User[]    @relation("MasterChild")
  expenses          Expense[]
  approvedExpenses  Expense[] @relation("ApprovedExpenses")
  expenseLimits     ExpenseLimit[]
  categories        Category[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expense {
  id                String        @id @default(cuid())
  userId            String
  expenseDate       DateTime
  amount            Decimal       @db.Decimal(10, 2)
  taxRate           Decimal       @db.Decimal(3, 2)
  taxAmount         Decimal       @db.Decimal(10, 2)
  amountWithoutTax  Decimal       @db.Decimal(10, 2)
  vendor            String
  purpose           String        @db.Text
  category          String
  status            ExpenseStatus @default(DRAFT)
  rejectionReason   String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  approvedAt        DateTime?
  approvedBy        String?

  // Relations
  user              User           @relation(fields: [userId], references: [id])
  approver          User?          @relation("ApprovedExpenses", fields: [approvedBy], references: [id])
  images            ExpenseImage[]
  notifications     Notification[]

  @@map("expenses")
}

model ExpenseImage {
  id          String   @id @default(cuid())
  expenseId   String
  filePath    String
  fileName    String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime @default(now())

  // Relations
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_images")
}

model ExpenseLimit {
  id            String      @id @default(cuid())
  masterUserId  String
  targetUserId  String?
  limitType     LimitType
  limitAmount   Decimal     @db.Decimal(10, 2)
  year          Int
  month         Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  masterUser    User        @relation(fields: [masterUserId], references: [id])

  @@map("expense_limits")
}

model Category {
  id            String   @id @default(cuid())
  masterUserId  String
  name          String
  displayOrder  Int
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())

  // Relations
  masterUser    User     @relation(fields: [masterUserId], references: [id])

  @@map("categories")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  type              String
  title             String
  message           String   @db.Text
  isRead            Boolean  @default(false)
  relatedExpenseId  String?
  createdAt         DateTime @default(now())

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  relatedExpense    Expense? @relation(fields: [relatedExpenseId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  tableName   String
  recordId    String
  oldValue    Json?
  newValue    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  MASTER
  CHILD
}

enum ExpenseStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  REVISION
}

enum LimitType {
  MONTHLY
  YEARLY
}

